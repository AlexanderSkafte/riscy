--------------------------------------------------------------------------------
IMPORTANT NOTES
--------------------------------------------------------------------------------

None for now, except that this file needs to be updated. Don't trust everything
here. :)

--------------------------------------------------------------------------------
	Program layout
--------------------------------------------------------------------------------

When a program is assembled, the resulting file is laid out as follows:

[data header]   <- Contains number of lines of data (in this case 3).
[some data]
[some data]
[some data]
[text header]   <- Contains number of lines of text (in this case 7).
[some text]
[some text]
[some text]
[some text]
[some text]
[some text]
[some text]

Each line of data or text is represented by a four-digit hexadecimal number
(e.g. 0x03fc).



--------------------------------------------------------------------------------
	The stack and the heap 
--------------------------------------------------------------------------------

Global variables, i.e. those declared after the .data directive, are stored
on the heap, i.e. at memory addresses starting from 0 and growing upward.

The stack pointer, sp, is a variable that keeps track of the top of the stack,
i.e. the lowest address in a block (the stack grows downward).

At start-up, the stack pointer has a value of 0xffff (MEMORY_SIZE - 1).
For an example on how to make room on the stack for more variables,
see the file in test/stack.s.



--------------------------------------------------------------------------------
	Labels
--------------------------------------------------------------------------------

Labels, i.e. those declared such as "loop:", must be at the beginning of a line
and end with a colon character (':').

A label may not contain only digits.

When the assembler first encounters a label, it will associate the label name
with a an address, i.e. an integer that is stored on the heap.



--------------------------------------------------------------------------------
	Registers
--------------------------------------------------------------------------------

The registers can hold 16-bit integers. Internally they are stored as unsigned
integers (uint16_t from stdint.h) but can be printed as hexadecimal, signed or
unsigned integers.

There are eigth registers, r0 to r7. To make things work, there are some
conventions that shall always be followed when implementing the VM for this ISA.

r0	-	Zero register; The contents of this register is always 0.

r1-r5	-	General purpose registers; can be used for any purpose.
		Examples are arguments to function call, return values from
		function calls, etc.

r6	-	Return address; use like "jalr r6, rX" where rX contains the
		address of the routine to jump to. On return, use "jalr r0 r6"

r7	-	Stack pointer; the contents of this register is the highest
		memory address.



--------------------------------------------------------------------------------
	Instruction set
--------------------------------------------------------------------------------

In total, there are 8 instructions, represented by 3 bits each:

opcode	name	format		example usage 1		example usage 2
--------------------------------------------------------------------------------
000	add	RRR		add	r1, r2, r3
001	addi	RRI		addi	r1, r2, 20	addi r1, r2, label
010	nand	RRR		nand	r1, r2, r3
011	lui	RI		lui	r1, 30
100	sw	RRI		sw	r1, r2, 0	sw r1, zero, label
101	lw	RRI		lw	r1, r2, 0	lw r1, zero, label
110	beq	RRI		beq	r1, r2, label
111	jalr	RRI		jalr	r7, r2

Format		...	  bits
------------------------------
RRR-type	opcode	: 3
		reg A	: 3
		reg B	: 3
		0	: 4
		reg C	: 3

RRI-type	opcode	: 3
		reg A	: 3
		reg B	: 3
		simm	: 7

RI-type		opcode	: 3
		reg A	: 3
		usimm	: 10

Pseudoinstructions (yet to be implemented):

	nop			=	add	r0, r0, r0
	lli	reg, simm	=	addi	reg, reg, imm & 0x3f
	movi	reg, imm	=	lui	reg, imm
					addi	reg, reg, imm & 0x3f

